import { motion } from 'framer-motion';
import jsQR from 'jsqr';
import { Camera, ClipboardCheck, Clock, QrCode, RefreshCw } from 'lucide-react';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import toast from 'react-hot-toast';
import Webcam from 'react-webcam';

interface Attendance {
  registrationNumber: string;
  timestamp: string;
  status: string;
}

const VolunteerPage: React.FC = () => {
  const webcamRef = useRef<Webcam>(null);
  const [scanning, setScanning] = useState(false);
  const [scannedData, setScannedData] = useState<string | null>(null);
  const [attendanceRecords, setAttendanceRecords] = useState<Attendance[]>([]);
  const [loading, setLoading] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [password, setPassword] = useState('');
  const [passwordError, setPasswordError] = useState('');

  // Google Apps Script URL would go here in a real application
  const GOOGLE_APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbzr0z5Y9CUxfNd2xSi4JS_jp2OuU4gNpUtD61H89Q-KYBqkmZlfFsCIHTNE0sW4EtGK/exec';

  const handlePasswordSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (password === 'someshofficial') {
      setIsAuthenticated(true);
      setPasswordError('');
    } else {
      setPasswordError('Incorrect password');
      setPassword('');
    }
  };

  // Verify the QR code data
  const verifyQRCode = (encodedData: string): string | null => {
    try {
      // Decode the base64 data
      const decodedData = atob(encodedData);
      // Split the components
      const [regNumber, timestamp, secretKey] = decodedData.split('|');

      // Verify the secret key
      if (secretKey !== 'AttendScan2025') {
        toast.error('Invalid QR code: Not generated by AttendScan');
        return null;
      }

      // Check if the QR code is not too old (e.g., within 24 hours)
      const scanTime = parseInt(timestamp);
      const currentTime = Date.now();
      const timeLimit = 24 * 60 * 60 * 1000; // 24 hours in milliseconds

      if (currentTime - scanTime > timeLimit) {
        toast.error('QR code has expired. Please generate a new one.');
        return null;
      }

      return regNumber;
    } catch (error) {
      toast.error('Invalid QR code format');
      return null;
    }
  };

  const captureFrame = useCallback(() => {
    if (!scanning || !webcamRef.current) return;

    const imageSrc = webcamRef.current.getScreenshot();
    if (!imageSrc) return;

    const image = new Image();
    image.src = imageSrc;

    image.onload = () => {
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      if (!context) return;

      canvas.width = image.width;
      canvas.height = image.height;
      context.drawImage(image, 0, 0, image.width, image.height);

      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
      const code = jsQR(imageData.data, imageData.width, imageData.height, {
        inversionAttempts: 'dontInvert',
      });

      if (code) {
        const registrationNumber = verifyQRCode(code.data);
        if (registrationNumber) {
          setScanning(false);
          setScannedData(registrationNumber);
          markAttendance(registrationNumber);
        }
      }
    };
  }, [scanning]);

  useEffect(() => {
    let interval: number | undefined;

    if (scanning) {
      interval = window.setInterval(captureFrame, 500);
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [scanning, captureFrame]);

  const startScanning = () => {
    setScanning(true);
    setScannedData(null);
  };

  const markAttendance = async (registrationNumber: string) => {
    setLoading(true);

    try {
      const attendanceData = {
        registrationNumber,
        timestamp: new Date().toISOString(),
        status: 'Present'
      };

      const response = await fetch(GOOGLE_APPS_SCRIPT_URL, {
        method: 'POST',
        mode: 'no-cors', // Important for Google Apps Script
        cache: 'no-cache',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(attendanceData)
      });

      // Since we're using no-cors, we can't actually read the response
      // So we'll assume success if no error was thrown
      const newAttendance: Attendance = {
        registrationNumber,
        timestamp: new Date().toLocaleString(),
        status: 'Present'
      };

      setAttendanceRecords(prev => [newAttendance, ...prev]);
      toast.success(`Attendance recorded for ${registrationNumber}`);

    } catch (error) {
      console.error('Error recording attendance:', error);
      toast.error('Failed to record attendance. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const resetScanner = () => {
    setScanning(false);
    setScannedData(null);
  };

  if (!isAuthenticated) {
    return (
      <div className="max-w-md mx-auto mt-20">
        <div className="card">
          <h1 className="text-2xl font-semibold mb-6 text-center">Volunteer Authentication</h1>
          <form onSubmit={handlePasswordSubmit} className="space-y-4">
            <div>
              <label htmlFor="password" className="block text-sm font-medium mb-2">
                Enter Password
              </label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full p-2 rounded-lg bg-[#1a1a25] border border-[#A020F033] focus:border-[#A020F0] outline-none"
                placeholder="Enter password to continue"
              />
              {passwordError && (
                <p className="text-red-500 text-sm mt-1">{passwordError}</p>
              )}
            </div>
            <button
              type="submit"
              className="w-full btn-primary"
            >
              Access Scanner
            </button>
          </form>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto">
      <h1 className="page-title">Volunteer Scanner</h1>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <motion.div
          className="card"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h2 className="text-2xl font-semibold mb-6">QR Code Scanner</h2>

          <div className="bg-black rounded-lg overflow-hidden mb-6 relative">
            {scanning ? (
              <Webcam
                audio={false}
                ref={webcamRef}
                screenshotFormat="image/jpeg"
                videoConstraints={{ facingMode: 'environment' }}
                className="w-full rounded-lg"
              />
            ) : (
              <div className="aspect-video bg-[#1a1a25] flex items-center justify-center rounded-lg">
                <div className="text-center p-8">
                  <QrCode className="h-16 w-16 text-[#A020F088] mx-auto mb-4" />
                  <p className="text-gray-400">Camera preview will appear here</p>
                </div>
              </div>
            )}

            {scanning && (
              <div className="absolute inset-0 pointer-events-none">
                <div className="relative h-full w-full">
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 border-2 border-[#A020F0] rounded-lg animate-pulse" />
                  <div className="absolute top-0 left-0 h-full w-full border-4 border-[#A020F033] rounded-lg" />
                </div>
              </div>
            )}
          </div>

          <div className="flex justify-center gap-4">
            {!scanning ? (
              <button
                onClick={startScanning}
                className="btn-primary"
                disabled={loading}
              >
                <Camera className="h-5 w-5" />
                <span>Start Scanning</span>
              </button>
            ) : (
              <button
                onClick={resetScanner}
                className="btn-primary bg-opacity-20 hover:bg-opacity-30 border border-[#A020F0]"
              >
                <RefreshCw className="h-5 w-5" />
                <span>Reset Scanner</span>
              </button>
            )}
          </div>

          {scannedData && (
            <motion.div
              className="mt-6 p-4 bg-[#A020F022] border border-[#A020F055] rounded-lg"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              transition={{ duration: 0.3 }}
            >
              <h3 className="font-medium mb-2 flex items-center text-[#A020F0]">
                <QrCode className="h-5 w-5 mr-2" />
                Scanned Result:
              </h3>
              <p className="font-mono bg-[#1a1a25] p-2 rounded break-all">
                {scannedData}
              </p>
              <div className="mt-4 flex justify-end">
                <button
                  onClick={resetScanner}
                  className="text-sm text-[#A020F0] hover:text-[#c27ff8] transition-colors"
                >
                  Scan Another Code
                </button>
              </div>
            </motion.div>
          )}
        </motion.div>

        <motion.div
          className="card"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <h2 className="text-2xl font-semibold mb-6">Recent Activity</h2>

          <div className="h-[400px] overflow-y-auto pr-2 custom-scrollbar">
            {attendanceRecords.length > 0 ? (
              <div className="space-y-4">
                {attendanceRecords.map((record, index) => (
                  <div
                    key={index}
                    className="p-3 bg-[#1a1a25] rounded-lg border border-[#A020F033] flex items-center"
                  >
                    <div className="bg-[#A020F022] p-2 rounded-full mr-3">
                      <ClipboardCheck className="h-6 w-6 text-[#A020F0]" />
                    </div>
                    <div className="flex-1">
                      <p className="font-medium">{record.registrationNumber}</p>
                      <div className="flex items-center text-xs text-gray-400">
                        <Clock className="h-3 w-3 mr-1" />
                        {record.timestamp}
                      </div>
                    </div>
                    <span className="px-2 py-1 bg-green-900 bg-opacity-20 text-green-400 text-xs rounded-full">
                      {record.status}
                    </span>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-12 text-gray-500">
                <ClipboardCheck className="h-12 w-12 mx-auto mb-3 opacity-30" />
                <p>No attendance records yet</p>
                <p className="text-sm mt-1">Scanned QR codes will appear here</p>
              </div>
            )}
          </div>
        </motion.div>
      </div>

      <div className="mt-12">
        <div className="card bg-gradient-to-br from-[#1e1e2d] to-[#2a2a3d]">
          <h3 className="text-xl font-semibold mb-4">Secure QR Code Scanning</h3>
          <p className="text-gray-300 mb-4">
            This scanner is designed to work exclusively with QR codes generated by AttendScan. It includes security features such as:
          </p>
          <ul className="list-disc list-inside space-y-2 text-gray-400 mb-6">
            <li>Encrypted QR code data with a secure key</li>
            <li>Timestamp validation to prevent QR code reuse</li>
            <li>Verification of authentic AttendScan-generated codes</li>
            <li>Protection against unauthorized scanning attempts</li>
          </ul>
          <div className="bg-[#1a1a25] p-4 rounded-lg border border-[#A020F033]">
            <h4 className="font-medium mb-2">Note for Volunteers:</h4>
            <p className="text-gray-400">
              Only QR codes generated through the official AttendScan participant portal will be recognized.
              If you encounter any issues with scanning, please ensure the participant has a valid, recently generated QR code.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VolunteerPage;
